class Solution {
public:
    string convert(string s, int numRows) {
        if(s.empty()||numRows==1||s.size()<=numRows)
        return s;
        string re;
        const int l=s.size();
        const int interval=2*(numRows-1);
        for(int i=0;i<numRows;i++){
            int j=i;
            int interval2=interval-2*i;
            while(1){
                if(i==0||i==numRows-1){
                if(j<l){
                    re.push_back(s[j]);
                    j+=interval;
                }
                else
                    break;
                }
                else{
                if(j<l)
                    re.push_back(s[j]);
                else
                    break;
                int k=j+interval2;
                if(k<l){
                    re.push_back(s[k]);
                    j+=interval;
                }
                else
                    break;
                }
            }
        }
        return re;
    }
};
//按Z字型走完整个字符串，同时将每个字符放到应该在的行内，下面两个思路相同，实现不同
class Solution {
public:
    string convert(string s, int numRows) {

        if (numRows == 1) return s;

        vector<string> rows(min(numRows, int(s.size())));
        int curRow = 0;
        bool goingDown = false;

        for (char c : s) {
            rows[curRow] += c;
            if (curRow == 0 || curRow == numRows - 1) goingDown = !goingDown;
            curRow += goingDown ? 1 : -1;
        }

        string ret;
        for (string row : rows) ret += row;
        return ret;
    }
};
class Solution {
public:
    string convert(string s, int numRows) {
        vector<string> temp(numRows);
        string res;
        if(s.empty() || numRows < 1) return res;
        if(numRows == 1) return s;
        for(int i = 0; i < s.size(); i++){
            int ans = i / (numRows-1);
            int cur = i % (numRows-1);
            if(ans % 2 == 0){  //结果为偶数或0
                temp[cur].push_back(s[i]); //按余数正序保存
            }
            if(ans % 2 != 0){  //结果为奇数
                temp[numRows-cur-1].push_back(s[i]); //按余数倒序保存
            }
        }
       for(int i = 0; i < temp.size(); i++){
               res += temp[i];
        }
        return res;
    }
};
