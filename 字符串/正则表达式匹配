//递归，时间复杂度高，遇见“*”太多难受
class Solution {
public:
    bool isMatch(string s, string p) {
        return matchcore(s,p);
    }
    bool matchcore(string s,string p){
        if(s.empty()&&p.empty())
        return true;
        if(!s.empty()&&p.empty())
        return false;
        int ls=s.size();
        int lp=p.size();
        if(p[1]=='*'){
            if(s[0]==p[0]||(p[0]=='.'&&!s.empty()))
            return matchcore(s.substr(1,ls-1),p)||matchcore(s.substr(1,ls-1),p.substr(2,lp-2))
            ||matchcore(s,p.substr(2,lp-2));
            else
            return matchcore(s,p.substr(2,lp-2));
        }
        else{
            if(s[0]==p[0]||(p[0]=='.'&&!s.empty()))
            return matchcore(s.substr(1,ls-1),p.substr(1,lp-1));
            else
            return false;
        }
    }
};
//动态规划，i，j表示子串长度。
class Solution {
public:
    bool isMatch(string s, string p) {
        int m = s.size();
        int n = p.size();
        vector<vector<int>> f(m + 1, vector<int>(n + 1));
        f[0][0] = true;
        for(int j=1;j<=n;j++){
            if(p[j-1]=='*'&&f[0][j-2]==1)
            f[0][j]=1;
            else
            f[0][j]=0;
        }

        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                if (p[j - 1] == '*') {
                    if(s[i-1]==p[j-2]||p[j-2]=='.')
                    f[i][j]=f[i-1][j]||f[i][j-2];
                    else
                    f[i][j]=f[i][j-2];
                }
                else {
                    if(s[i-1]==p[j-1]||p[j-1]=='.')
                    f[i][j]=f[i-1][j-1];
                }
            }
        }
        return f[m][n];
    }
};
