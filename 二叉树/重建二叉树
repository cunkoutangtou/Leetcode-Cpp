输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。

 

例如，给出

前序遍历 preorder = [3,9,20,15,7]
中序遍历 inorder = [9,3,15,20,7]
返回如下的二叉树：

    3
   / \
  9  20
    /  \
   15   7
 

限制：

0 <= 节点个数 <= 5000

链接：https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof

//根据前序序列找根，根据中序序列找左右子树，需要根据中序序列得到左右子树节点的个数，不断如此递归到左右子树。
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    map<int,int> m;
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(preorder.empty()||inorder.empty())
        return nullptr;
        int pl=preorder.size(),il=inorder.size();
        if(pl!=il)
        return nullptr;
        for(int i=0;i<il;i++){
            m[inorder[i]]=i;
        }
        return rebu(preorder,0,pl-1,inorder,0,il-1);
    }
    TreeNode *rebu(vector<int>& preorder, int pleft, int pright, vector<int>& inorder, int ileft,int iright){
        if(iright-ileft!=pright-pleft&&iright-ileft==0&&preorder[pleft]!=inorder[ileft])
        throw std::exception();
        TreeNode *root=new TreeNode(preorder[pleft]);
        int l=m[preorder[pleft]]-ileft;
        int r=iright-m[preorder[pleft]];
        if(l>0)
        root->left=rebu(preorder,pleft+1,pleft+l,inorder,ileft,ileft+l-1);
        else
        root->left=nullptr;
        if(r>0)
        root->right=rebu(preorder,pleft+l+1,pright,inorder,ileft+l+1,iright);
        else
        root->right=nullptr;
        return root;
    }
};
//迭代法，根据先序序列一直构建左子树，用中序序列判断是否重建到树的左下角了，若到左下角则弹出栈顶元素直到遇到先序与中序不同的位置（树杈），然后构建一个右子树节点，重复前面步骤向左下走到底。
class Solution {
    map<int,int> m;
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(preorder.empty()||inorder.empty())
        return nullptr;
        int pl=preorder.size(),il=inorder.size();
        if(pl!=il)
        return nullptr;
        stack<TreeNode*> sta;
        TreeNode *root=new TreeNode(preorder[0]);
        TreeNode *node=nullptr;
        sta.push(root);
        int iIndex=0;
        for(int i=1;i<pl;i++){
            node=sta.top();//将node指向当前节点
            if(node->val!=inorder[iIndex]){//如果可以向左走，就创建一个节点入栈
                node->left=new TreeNode(preorder[i]);
                sta.push(node->left);
            }
            else{//
                while(!sta.empty()&&sta.top()->val==inorder[iIndex]){//否则意味着走到左下角了，向上退，找前序和中序的分叉点
                    node=sta.top();//node多等了一个循环，保证sta.top()和inorder[iIndex]不同时，它正好在分叉点上。
                    sta.pop();
                    iIndex++;
                }
                node->right=new TreeNode(preorder[i]);//构建一个右节点，作为有字数的根节点，从这里会重复之前的步骤直到这个子树的左下角
                sta.push(node->right);
            }
        }
        return root;
    }
};
