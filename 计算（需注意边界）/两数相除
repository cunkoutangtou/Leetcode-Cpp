给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。

返回被除数 dividend 除以除数 divisor 得到的商。

整数除法的结果应当截去（truncate）其小数部分，例如：truncate(8.345) = 8 以及 truncate(-2.7335) = -2

 

示例 1:

输入: dividend = 10, divisor = 3
输出: 3
解释: 10/3 = truncate(3.33333..) = truncate(3) = 3
示例 2:

输入: dividend = 7, divisor = -3
输出: -2
解释: 7/-3 = truncate(-2.33333..) = -2
 

提示：

被除数和除数均为 32 位有符号整数。
除数不为 0。
假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。本题中，如果除法结果溢出，则返回 231 − 1。

链接：https://leetcode-cn.com/problems/divide-two-integers

//要注意有符号数下边界和上边界绝对值差1。从第32位开始找齐所满足可整除除数的位，然后加起来。
class Solution {
public:
    int divide(int dividend, int divisor) {
        if(divisor==1)return dividend;
        if(dividend==INT_MIN&&divisor==-1)return INT_MAX;
        if(dividend==divisor)return 1;
        int re=0;
        bool pos=dividend>=0==divisor>=0;
        long long a=dividend>0?dividend:-(long long)dividend;
        long long b=divisor>0?divisor:-(long long)divisor;
        for(int i=31;i>=0;i--){
            if(a>>i>=b){
            re+=1<<i;
            a-=b<<i;
            }
        }
        return pos?re:-re;
    }
};
//从除数所有的最高位开始，逐渐找齐所有满足整除除数的位加起来
class Solution {
public:
    int divide(int dividend, int divisor) {
        if(divisor==1)return dividend;
        if(dividend==INT_MIN&&divisor==-1)return INT_MAX;
        if(dividend==divisor)return 1;
        bool pos=dividend>=0==divisor>=0;
        long long a=dividend>0?dividend:-(long long)dividend;
        long long b=divisor>0?divisor:-(long long)divisor;
        int re=int(div(a,b));
        return pos?re:-re;
    }
    long long div(long long a,long long b){
        if(a<b)
        return 0;
        int count=1;
        auto tb=b;
        while(tb+tb<=a){
            count=count+count;
            tb=tb+tb;
        }
        return count+div(a-tb,b);
    }
};
