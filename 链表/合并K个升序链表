给你一个链表数组，每个链表都已经按升序排列。

请你将所有链表合并到一个升序链表中，返回合并后的链表。

 示例 1：

输入：lists = [[1,4,5],[1,3,4],[2,6]]
输出：[1,1,2,3,4,4,5,6]
解释：链表数组如下：
[
  1->4->5,
  1->3->4,
  2->6
]
将它们合并到一个有序链表中得到。
1->1->2->3->4->4->5->6
示例 2：

输入：lists = []
输出：[]
示例 3：

输入：lists = [[]]
输出：[]
 

提示：

k == lists.length
0 <= k <= 10^4
0 <= lists[i].length <= 500
-10^4 <= lists[i][j] <= 10^4
lists[i] 按 升序 排列
lists[i].length 的总和不超过 10^4

链接：https://leetcode-cn.com/problems/merge-k-sorted-lists

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 //两两合并
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size()==1)
        return lists[0];
        if(lists.empty())
        return nullptr;
        ListNode* re=nullptr;
        for(int i=0;i<lists.size();i++){
            re=mergetwoL(re,lists[i]);
        }
        return re;
    }
    ListNode* mergetwoL(ListNode* a,ListNode* b){
        if(!a||!b)return a?a:b;
        ListNode head,*tail=&head;
        while(a&&b){
            if(a->val<b->val){
            tail->next=a;
            a=a->next;
            }
            else{
                tail->next=b;
                b=b->next;
            }
            tail=tail->next;
        }
        tail->next=a?a:b;
        return head.next;
    }
};
//分治法，归并排序，将lists中的链表两两合并，再将得到的链表继续两两合并直到只剩一个链表。
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size()==1)
        return lists[0];
        if(lists.empty())
        return nullptr;        
        return mer(lists,0,lists.size()-1);
    }
    ListNode* mer(vector<ListNode*>& lists,int l,int r){
        if(l==r)return lists[l];
        int mid=(l+r)>>1;
        return mergetwoL(mer(lists,l,mid),mer(lists,mid+1,r));
    }
    ListNode* mergetwoL(ListNode* a,ListNode* b){
        if(!a||!b)return a?a:b;
        ListNode head,*tail=&head;
        while(a&&b){
            if(a->val<b->val){
            tail->next=a;
            a=a->next;
            }
            else{
                tail->next=b;
                b=b->next;
            }
            tail=tail->next;
        }
        tail->next=a?a:b;
        return head.next;
    }
};
//使用优先队列，不断将各链表最小的点放入队列，然后从队列中取点即可
class Solution {
public:
    struct status{
        int val;
        ListNode* node;
        bool operator<(const status &rhs)const{
            return val>rhs.val;
        }
    };
    priority_queue<status> q;
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        for(auto a:lists){
            if(a)
            q.push({a->val,a});
        }
        ListNode head;
        ListNode* p=&head;
        while(!q.empty()){
            auto f=q.top();
            q.pop();
            p->next=f.node;
            p=p->next;
            if(f.node->next)
            q.push({f.node->next->val,f.node->next});
        }
        return head.next;
    }
};
