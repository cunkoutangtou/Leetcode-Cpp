/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 //迭代
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1==nullptr)
        return l2;
        if(l2==nullptr)
        return l1;
        ListNode* q=new ListNode(0), * newhead{q};
        while(l1&&l2){
            if(l1->val<=l2->val){
                q->next=l1;
                l1=l1->next;
            }
            else{
                q->next=l2;
                l2=l2->next;
            }
            q=q->next;
        }
        q->next=l1?l1:l2;
        return newhead->next;
    }
};
 //递归
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l2){
            return l1;   //一个链表截至的话就返回到另一个链表
        }
        if(!l1){
            return l2;
        }
        if(l1->val > l2->val){
            //l2小 返回l2这个结点    要定义一下这个结点的后继   递归就是递归这个后继
            l2->next=mergeTwoLists(l1,l2->next);  //后继是l1 和l2 下一个里边的小的
            return l2;    
        }
        else{//l1 小返回 l1 这个结点    
            l1->next=mergeTwoLists(l1->next,l2);  //后继是l1下一个和l2 里边小的一个
            return l1;
        }
    }
};
