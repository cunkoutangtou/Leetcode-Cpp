   /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。

你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。

 
示例 1：


输入：head = [1,2,3,4]
输出：[2,1,4,3]
示例 2：

输入：head = []
输出：[]
示例 3：

输入：head = [1]
输出：[1]
 

提示：

链表中节点的数目在范围 [0, 100] 内
0 <= Node.val <= 100

链接：https://leetcode-cn.com/problems/swap-nodes-in-pairs

//迭代法，两两交换然后移动到下两个，注意下两个不能有空指针
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if(head==nullptr||head->next==nullptr)
        return head;
        ListNode h1(0,head),*p=h1.next,*q=p->next,*r=&h1;
        while(q){
            p->next=q->next;
            q->next=p;
            r->next=q;
            swap(p,q);
            if(q->next==nullptr||q->next->next==nullptr){
                break;
            }
            else{
                p=p->next->next;
                q=q->next->next;
                r=r->next->next;
            }
        }
        return h1.next;
    }
};
//递归法，直接将两个节点中的第一个指向下两个节点交换完的第一个
class Solution {
public:
   ListNode* swapPairs(ListNode* head) {
        if(head==nullptr||head->next==nullptr)
        return head;
        ListNode* newhead=head->next;
        head->next=swapPairs(newhead->next);
        newhead->next=head;
        return newhead;
    }
};
